#!/usr/bin/env ruby

# Add lib directory to load path
$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))

require_relative '../lib/jira/ticket_fetcher'

# Script to fetch Jira ticket information
# Usage: bin/fetch_jira_ticket TICKET-123
# Requires JIRA_ACCESS_TOKEN environment variable to be set

def display_usage
  puts "Usage: #{$0} TICKET-KEY"
  puts "Example: #{$0} EM-1234"
  puts ""
  puts "Environment variables required:"
  puts "  JIRA_ACCESS_TOKEN - Your Jira API token"
  puts "  JIRA_EMAIL - Your Jira email address"
end

def display_ticket_info(ticket_info)
  puts '=' * 80
  puts "JIRA TICKET INFORMATION"
  puts '=' * 80

  puts "\nTicket Key: #{ticket_info[:key]}"
  puts "URL: #{ticket_info[:url]}"
  puts "Summary: #{ticket_info[:summary]}"
  puts "Status: #{ticket_info[:status]}"
  puts "Issue Type: #{ticket_info[:issue_type]}"
  puts "Priority: #{ticket_info[:priority]}"
  puts "Project: #{ticket_info[:project]}"

  if ticket_info[:assignee]
    puts "Assignee: #{ticket_info[:assignee][:display_name]} (#{ticket_info[:assignee][:email]})"
  else
    puts "Assignee: Unassigned"
  end

  if ticket_info[:reporter]
    puts "Reporter: #{ticket_info[:reporter][:display_name]} (#{ticket_info[:reporter][:email]})"
  end

  puts "Created: #{ticket_info[:created]}"
  puts "Updated: #{ticket_info[:updated]}"

  if ticket_info[:labels] && !ticket_info[:labels].empty?
    puts "Labels: #{ticket_info[:labels].join(', ')}"
  end

  if ticket_info[:components] && !ticket_info[:components].empty?
    puts "Components: #{ticket_info[:components].join(', ')}"
  end

  if ticket_info[:parent]
    puts "Parent: #{ticket_info[:parent][:key]} - #{ticket_info[:parent][:summary]}"
  end

  puts "\nDescription:"
  puts ticket_info[:description]

  puts "\n" + '=' * 80
end

# Main execution
if ARGV.empty?
  display_usage
  exit 1
end

ticket_key = ARGV[0]

begin
  fetcher = Jira::TicketFetcher.new
  ticket_info = fetcher.fetch_ticket(ticket_key)
  display_ticket_info(ticket_info)
rescue ArgumentError => e
  puts "Error: #{e.message}"
  exit 1
rescue StandardError => e
  puts "Error fetching ticket: #{e.message}"
  exit 1
end